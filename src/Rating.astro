---
import { Icon } from 'astro-icon';

export interface Props {
    rate?: number|string;
    max?: number|string;
    total?: number|string;
    full?: string;
    half?: string;
    empty?: string;
    class?: string;
    totalClass?: string;
    starsClass?: string;
    starClass?: string;
}

const { 
    max=5,
    rate=0,
    total,
    full="star-full",
    half="star-half",
    empty="star-empty",
    totalClass="leading-none text-xs text-gray-300",
    starsClass="flex items-center",
    starClass="h-4 w-4",
    ...attrs
} = Astro.props as Props;

const default_attrs = {
    class: "flex items-center gap-1"
};

const fullStars = Math.floor(+rate);
const halfStars = +rate - fullStars
const emptyStars = Math.floor(+max - +rate);

function addCommas(num) {
    if (typeof num == 'number') return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    if (typeof num == 'string') return num.replace(/[^\d]/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    return "0"
}
---

<div {...{...default_attrs, ...attrs}}>
    {total !== undefined && <span class={totalClass}>({addCommas(total)})</span>}
    <div class={starsClass}>
        {[...Array(fullStars)].map(() => {
            return <Icon name={full} {...{class: starClass}}/>
        })}
        {halfStars != 0 && <Icon name={half} {...{class: starClass}}/>}
        {emptyStars != 0 && [...Array(emptyStars)].map(() => {
            return <Icon name={empty} {...{class: starClass}}/>
        })}
    </div>
</div>