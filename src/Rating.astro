---
import { Icon } from 'astro-icon';

export interface Props {
    rate?: number|string;
    max?: number|string;
    total?: number|string;
    starFull?: string;
    starHalf?: string;
    starDisabled?: string;
    containerClass?: string;
    totalClass?: string;
    starsClass?: string;
    iconClass?: string;
}

const { 
    total,
    max=5,
    rate=0,
    starFull="star-full",
    starHalf="star-half",
    starDisabled="star-disabled",
    containerClass="flex items-center gap-1",
    totalClass="text-xs text-gray-300",
    starsClass="flex items-center",
    iconClass="h-4 w-4"
} = Astro.props as Props;

const fullStars = Math.floor(+rate);
const halfStars = +rate - fullStars
const disabledStars = Math.floor(+max - +rate);

function addCommas(num) {
    if (typeof num == 'number') return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    if (typeof num == 'string') return num.replace(/[^\d]/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    return "0"
}
---

<div class={containerClass}>
    {total !== undefined && <span class={totalClass}>({addCommas(total)})</span>}
    <div class={starsClass}>
        {[...Array(fullStars)].map(() => {
            return <div class={iconClass}><Icon name={starFull}/></div>
        })}
        {halfStars != 0 && <div class={iconClass}><Icon name={starHalf}/></div>}
        {disabledStars != 0 && [...Array(disabledStars)].map(() => {
            return <div class={iconClass}><Icon name={starDisabled}/></div>
        })}
    </div>
</div>
